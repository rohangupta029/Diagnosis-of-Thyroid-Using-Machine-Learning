# -*- coding: utf-8 -*-
"""Major Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SUdAFgzL52relJ4klBOdOwQxi7LKyMc_
"""

#INSTALLING PYCARET LIBRARY
!pip install pycaret

"""# Introduction
### Thyroid disease (TD) is one of the most progressive endocrine disorders in the human population today. Prediction of the endocrine disease is a critical task in the field of clinical data analysis. Machine Learning (ML) has shown effective results in the decision making and predictions from the enormous data generated by healthcare domain. Various studies in the prediction of thyroid disease have given only a glimpse using machine learning algorithms. In this project we have proposed three models based on the primary dataset collected from 3772  patients.

<img src="https://i.imgur.com/5cW3lGZ.gif?noredirect" width="800px">
"""

import pandas as pd #IMPORTING PANDAS LIBRARY
thyroid=pd.read_csv("hypothyroid.csv")
thyroid.head()

thyroid.columns #LIST OF COLUMNS IN THYROID DATASET

import numpy as np #IMPORT NUMPY LIBRARY
thyroid=thyroid.replace({"?":np.NAN}) #REPLACING ? WITH NP.NAN

thyroid["binaryClass"]=thyroid["binaryClass"].map({"P":1,"N":0})  #REPLACING P WITH 1 AND N WITH 0
thyroid=thyroid.replace({"t":1,"f":0})  #REPLACING t WITH 1 AND f WITH 0
thyroid=thyroid.replace({"F":1,"M":0})  #REPLACING F WITH 1 AND M WITH 0
cols = thyroid.columns[thyroid.dtypes.eq('object')]
thyroid[cols] = thyroid[cols].apply(pd.to_numeric, errors='coerce') #CONVERTING DATA TO NUMERIC VALUE
thyroid.dtypes  #CHECKING THE DATA TYPES

thyroid.info()  #CHECKING INFO ABOUT THE DATASET

thyroid['T4U measured'].fillna(thyroid['T4U measured'].mean(), inplace=True) #FILLING THE NA ENTRIES WITH THE MEAN VALUE
thyroid['sex'].fillna(thyroid['sex'].mean(), inplace=True)  #FILLING THE NA ENTRIES WITH THE MEAN VALUE
thyroid['age'].fillna(thyroid['age'].mean(), inplace=True)  #FILLING THE NA ENTRIES WITH THE MEAN VALUE
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')
thyroid['TSH'] = imputer.fit_transform(thyroid[['TSH']])  #TRANSFORMING THE ENTRIES WITH SIMPLE IMPUTER
thyroid['T3'] = imputer.fit_transform(thyroid[['T3']])  #TRANSFORMING THE ENTRIES WITH SIMPLE IMPUTER
thyroid['TT4'] = imputer.fit_transform(thyroid[['TT4']])  #TRANSFORMING THE ENTRIES WITH SIMPLE IMPUTER
thyroid['T4U'] = imputer.fit_transform(thyroid[['T4U']])  #TRANSFORMING THE ENTRIES WITH SIMPLE IMPUTER
thyroid['FTI'] = imputer.fit_transform(thyroid[['FTI']])  #TRANSFORMING THE ENTRIES WITH SIMPLE IMPUTER

thyroid.isnull().sum()  #CHECKING THE TOTAL NUMBER OF NULL VALUES

del thyroid["TBG"]  #DELETING THE TBG COLUMN
del thyroid["referral source"]  #DELETING THE REFERRAL SOURCE COLUMN

thyroid.info()  #CHECKING THE INFO ABOUT THE DATASET

thyroid.head()  #HAVING A PEEK ON THE DATAFRAME

thyroid.columns #LIST OF COLUMNS IN THE DATASET

#matplotlib
import matplotlib.pyplot as plt #IMPORTING MATPLOTLIB

#seaborn
import seaborn as sns #IMPORTING SEABORN

sns.countplot(x='binaryClass',data=thyroid) #PLOTING THE COUNTPLOT FOR THE TARGET VARIABLE
plt.title("Countplot for Target variable");

"""1 REPRESENTS POSITIVE, 0 REPRESENTS NEGATIVE

DISTRIBUTION OF THE POSITIVE CLASS BASED ON AGE
"""

positive_df = thyroid[thyroid.binaryClass==1]
plt.figure(figsize=(9,6))
sns.histplot(x='age',data=positive_df,color='blue')
plt.title("Distribution of Positive Class Based on Age",{'fontsize':20});

"""DISTRIBUTION ON THE BASIS OF SICK AND WELL"""

plt.figure(figsize=(8,8))
plt.pie(x=positive_df.sick.value_counts(),
        labels=['Sick','Well'],
        startangle = 20,
        colors=['deepskyblue','red'],
        autopct='%.2f',
        explode=[0,0.2]
       );
plt.legend();

#SETTING THE FIGURE SIZE
sns.set(rc={'figure.figsize': [8, 8]}, font_scale=1.2)

#PLOTTING THE DIST PLOT ON THE AGE COLUMN
sns.distplot(thyroid['age'])

#PLOTTING THE DIST PLOT ON THE SEX COLUMN
sns.distplot(thyroid['sex'])

#PLOTTING THE DIST PLOT ON THE T3 COLUMN
sns.distplot(thyroid['T3'])

#PLOTTING THE DIST PLOT ON THE TT4 COLUMN
sns.distplot(thyroid['TT4'])

#PLOTTING THE DIST PLOT ON THE T4U COLUMN
sns.distplot(thyroid['T4U'])

#PLOTTING THE DIST PLOT ON THE FTI COLUMN
sns.distplot(thyroid['FTI'])

#PLOTTING THE DIST PLOT ON THE TBG MEASURED COLUMN
sns.distplot(thyroid['TBG measured'])

#PLOTTING THE JOINT PLOT ON THE AGE VS TT4 COLUMN
sns.jointplot(x='age', y='TT4', data=thyroid, kind='scatter', height=8, color='m')

#PLOTTING THE JOINT PLOT ON THE AGE VS TT4 COLUMN
sns.jointplot(x='age', y='TT4', data=thyroid, kind='reg', height=8, color='m')

#PLOTTING THE COUNT PLOT ON THE BINARYCLASS
sns.countplot(x='binaryClass', data=thyroid, palette='rocket')

#PLOTTING THE COUNT PLOT ON THE BINARYCLASS ON THE BASIS OF SEX
sns.countplot(x='binaryClass', data=thyroid, hue='sex', palette='BuPu')

#PLOTTING THE STRIP PLOT ON THE BINARYCLASS
sns.stripplot(x="binaryClass", y="age", data=thyroid, palette="viridis")

#PLOTTING THE BOX PLOT ON THE BINARYCLASS
sns.boxplot(x='binaryClass', y='age', data=thyroid)

#PLOTTING THE JOINT PLOT ON FTI VS BINARYCLASS
sns.jointplot(x='FTI', y='binaryClass', data=thyroid, kind='scatter', height=8, color='m')

#THE THYROID CORRELEATION MATRIX
thyroid_corr = thyroid.corr()
thyroid_corr

sns.set(rc={'figure.figsize': [20, 20]}, font_scale=1.2) #SETTING THE FIGURE SIZE
sns.heatmap(thyroid_corr, cmap='viridis', linecolor='k', linewidths=2, annot=True)  #PLOTTING HEAT MAP FOR THE CO RELATION



#SETTING UP THE COLUMN FOR THE PYCARET LIBRARY
from pycaret.classification import*
df = setup(data = thyroid,target='binaryClass',numeric_features=['age', 'sex', 'on thyroxine', 'query on thyroxine',
       'on antithyroid medication', 'sick', 'pregnant', 'thyroid surgery',
       'I131 treatment', 'query hypothyroid', 'query hyperthyroid', 'lithium',
       'goitre', 'tumor', 'hypopituitary', 'psych', 'TSH measured', 'TSH',
       'T3 measured', 'T3', 'TT4 measured', 'TT4', 'T4U measured', 'T4U',
       'FTI measured', 'FTI', 'TBG measured'])

#CHECKING THE DATAFRAME
df

#COMPARING BETWEEN DIFFERENT MODELS AND CHOOSING THE BEST FIT
compare_models(fold=7)

#CREATING THE GRADIENT BOOSTER CLASSIFIER MODEL
gbcmodel=create_model('gbc')

#TUNING THE GBC MODEL
tuned_gbc_model=tune_model(gbcmodel)

#FINALIZING THE GBC MODEL
finalize_model(tuned_gbc_model)

#SAVING THE GBC MODEL TO THE LOCAL DIRECTORY
save_model(gbcmodel,'model')

#LOADING THE FINAL MODEL FROM THE LOCAL DIRECTORY
final_model=load_model('model')

#CHOOSING THE X AND Y DATASET
x = thyroid.drop('binaryClass', axis=1)
y = thyroid['binaryClass']

#SPLITTING THE DATA INTO X AND Y DATASET
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

#STORING THE PREDICTION IN THE PREDICTION DATAFRAME 
prediction=final_model.predict(x_test)

#IMPORTING THE CLASSIFICATION REPORT FROM THE SKLEARN.METRICS LIBRARY
from sklearn.metrics import classification_report
print(classification_report(y_test,prediction))

#FINAL ACCURACY OF THE MODEL
print("Accuracy Score is : ",final_model.score(x_test,y_test)*100,"%")

"""#CONCLUSION
### Thyroid disease is one of the diseases that afflict the worldâ€™s population, and the number of cases of this disease is increasing. Because of medical reports that show serious imbalances in thyroid diseases. This disease was classified using algorithms. Machine learning showed us good results using several algorithms and was built in the form of the final model.
"""